# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UiPysubdl.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QFileDialog
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtCore import QTimer,QDateTime, Qt
from bs4 import BeautifulSoup
from zipfile import ZipFile
import time, sys, requests, os, platform
from os import system

# The base url that we use for get subtitle
webSiteUrl = "https://subf2m.co"

# Define dict to determine language subtitle
language = {
    "Persian": "farsi_persian",
    "English": "english",
    "Arabic": "arabic"
}

# Define dict to determine format subtitle
formatMovie = {
    "WEB-DL": "WEB-DL",
    "WEBRip": "WEBRip",
    "HDTV": "HDTV",
    "HDRip": "HDRip",
    "HC-Cam": "HC-Cam",
    "HDTC": "HDTC",
    "HC.CAMRip": "HC.CAMRip",
    "HC.HDTS": "HC.HDTS",
    "HD-TC": "HD-TC",
    "BluRay": "BluRay",
    "UHD.BluRay": "UHD.BluRay",
    "BRRip": "BRRip",
    "BDRip": "BDRip",
    "Full.HD": "Full.HD",
    "HDCam": "HDCam"
}

# Define dict for determine resolotion movie
resolution = {
    "720": "720",
    "480": "480",
    "1080": "1080",
    "2160": "2160"
}

class Ui_WizardPage(object):

    # Define str for search url
    searchUrl = ""

    # Follow variable define for get path program and current path
    currentpath = ""
    path = ""
    pathwin = ""
    pathlin = ""
    pathProgram = os.getcwd()

    # Define boolean to check press button submit
    checkSubmitButton = False

    # Ui with qt
    def setupUi(self, WizardPage):
        WizardPage.setObjectName("WizardPage")
        WizardPage.resize(520, 441)

        self.StartButton = QtWidgets.QPushButton(WizardPage)
        self.StartButton.setGeometry(QtCore.QRect(270, 400, 90, 30))
        self.StartButton.setIconSize(QtCore.QSize(20, 20))
        self.StartButton.setObjectName("StartButton")
        self.StartButton.clicked.connect(self.clickStartbtn)

        self.CancelButton = QtWidgets.QPushButton(WizardPage)
        self.CancelButton.setGeometry(QtCore.QRect(400, 400, 90, 30))
        self.CancelButton.setIconSize(QtCore.QSize(20, 20))
        self.CancelButton.setObjectName("CancelButton")
        self.CancelButton.clicked.connect(self.closeWindow)

        self.GetNameMovie = QtWidgets.QTextEdit(WizardPage)
        self.GetNameMovie.setGeometry(QtCore.QRect(270, 60, 141, 28))
        self.GetNameMovie.setObjectName("GetNameMovie")

        self.NameMovie = QtWidgets.QLabel(WizardPage)
        self.NameMovie.setGeometry(QtCore.QRect(270, 30, 181, 16))
        self.NameMovie.setObjectName("NameMovie")

        self.labelOfLanguage = QtWidgets.QLabel(WizardPage)
        self.labelOfLanguage.setGeometry(QtCore.QRect(30, 120, 171, 16))
        self.labelOfLanguage.setObjectName("labelOfLanguage")

        self.labelOfFormatMovie = QtWidgets.QLabel(WizardPage)
        self.labelOfFormatMovie.setGeometry(QtCore.QRect(30, 190, 131, 16))
        self.labelOfFormatMovie.setObjectName("labelOfFormatMovie")

        self.labelOFResolotion = QtWidgets.QLabel(WizardPage)
        self.labelOFResolotion.setGeometry(QtCore.QRect(40, 270, 121, 16))
        self.labelOFResolotion.setObjectName("labelOFResolotion")

        self.label = QtWidgets.QLabel(WizardPage)
        self.label.setGeometry(QtCore.QRect(270, 95, 111, 16))
        self.label.setObjectName("label")

        self.comboBoxForLanguage = QtWidgets.QComboBox(WizardPage)
        self.comboBoxForLanguage.setGeometry(QtCore.QRect(30, 150, 111, 22))
        self.comboBoxForLanguage.setEditable(False)
        self.comboBoxForLanguage.setObjectName("comboBoxForLanguage")
        self.comboBoxForLanguage.addItem("")
        self.comboBoxForLanguage.addItem("")
        self.comboBoxForLanguage.addItem("")

        self.comboBoxForFormat = QtWidgets.QComboBox(WizardPage)
        self.comboBoxForFormat.setGeometry(QtCore.QRect(30, 220, 111, 22))
        self.comboBoxForFormat.setEditable(False)
        self.comboBoxForFormat.setObjectName("comboBoxForFormat")
        self.comboBoxForFormat.addItem("")
        self.comboBoxForFormat.addItem("")
        self.comboBoxForFormat.addItem("")
        self.comboBoxForFormat.addItem("")
        self.comboBoxForFormat.addItem("")
        self.comboBoxForFormat.addItem("")
        self.comboBoxForFormat.addItem("")
        self.comboBoxForFormat.addItem("")
        self.comboBoxForFormat.addItem("")
        self.comboBoxForFormat.addItem("")
        self.comboBoxForFormat.addItem("")
        self.comboBoxForFormat.addItem("")
        self.comboBoxForFormat.addItem("")
        self.comboBoxForFormat.addItem("")
        self.comboBoxForFormat.addItem("")

        self.radioButton480 = QtWidgets.QRadioButton(WizardPage)
        self.radioButton480.setGeometry(QtCore.QRect(40, 300, 61, 20))
        self.radioButton480.setChecked(True)
        self.radioButton480.setObjectName("radioButton480")

        self.radioButton720 = QtWidgets.QRadioButton(WizardPage)
        self.radioButton720.setGeometry(QtCore.QRect(130, 300, 51, 20))
        self.radioButton720.setObjectName("radioButton720")

        self.radioButton1080 = QtWidgets.QRadioButton(WizardPage)
        self.radioButton1080.setGeometry(QtCore.QRect(40, 330, 61, 20))
        self.radioButton1080.setObjectName("radioButton1080")

        self.radioButton2160 = QtWidgets.QRadioButton(WizardPage)
        self.radioButton2160.setGeometry(QtCore.QRect(130, 330, 51, 20))
        self.radioButton2160.setObjectName("radioButton2160")

        self.labelOfOsName = QtWidgets.QLabel(WizardPage)
        self.labelOfOsName.setGeometry(QtCore.QRect(30, 30, 81, 16))
        self.labelOfOsName.setObjectName("labelOfOsName")

        self.labelOsNameShow = QtWidgets.QLabel(WizardPage)
        self.labelOsNameShow.setGeometry(QtCore.QRect(130, 30, 71, 16))
        self.labelOsNameShow.setObjectName("labelOsNameShow")

        self.progressBarOfPoster = QtWidgets.QProgressBar(WizardPage)
        self.progressBarOfPoster.setGeometry(QtCore.QRect(270, 340, 221, 23))
        self.progressBarOfPoster.setProperty("value", 0)
        self.progressBarOfPoster.setMinimum(0)
        self.progressBarOfPoster.setMaximum(100)
        self.progressBarOfPoster.setObjectName("progressBarOfPoster")

        self.line = QtWidgets.QFrame(WizardPage)
        self.line.setGeometry(QtCore.QRect(0, 100, 251, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")

        self.line_2 = QtWidgets.QFrame(WizardPage)
        self.line_2.setGeometry(QtCore.QRect(0, 250, 251, 20))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")

        self.line_3 = QtWidgets.QFrame(WizardPage)
        self.line_3.setGeometry(QtCore.QRect(240, 0, 20, 441))
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")

        self.textEdit = QtWidgets.QTextEdit(WizardPage)
        self.textEdit.setGeometry(QtCore.QRect(20, 400, 221, 26))
        self.textEdit.setObjectName("textEdit")

        self.line_4 = QtWidgets.QFrame(WizardPage)
        self.line_4.setGeometry(QtCore.QRect(-10, 350, 261, 16))
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")

        self.labelForPath = QtWidgets.QLabel(WizardPage)
        self.labelForPath.setGeometry(QtCore.QRect(20, 370, 121, 16))
        self.labelForPath.setObjectName("labelForPath")

        self.ChangePathbutton = QtWidgets.QPushButton(WizardPage)
        self.ChangePathbutton.setGeometry(QtCore.QRect(150, 365, 90, 30))
        self.ChangePathbutton.setIconSize(QtCore.QSize(20, 20))
        self.ChangePathbutton.setObjectName("ChangePathbutton")
        self.ChangePathbutton.clicked.connect(self.useDialog)

        self.labelShowPoster = QtWidgets.QLabel(WizardPage)
        self.labelShowPoster.setGeometry(QtCore.QRect(270, 120, 211, 201))
        self.labelShowPoster.setText("")
        self.labelShowPoster.setTextFormat(QtCore.Qt.MarkdownText)
        self.labelShowPoster.setScaledContents(True)
        self.labelShowPoster.setObjectName("labelShowPoster")

        self.labelShowTime = QtWidgets.QLabel(WizardPage)
        self.labelShowTime.setGeometry(QtCore.QRect(30, 60, 200, 30))
        self.labelShowTime.setAlignment(Qt.AlignCenter)
        self.labelShowTime.setObjectName("labelShowTime")

        self.submitNameMovie = QtWidgets.QPushButton(WizardPage)
        self.submitNameMovie.setGeometry(QtCore.QRect(420, 59, 90, 30))
        self.submitNameMovie.setIconSize(QtCore.QSize(20, 20))
        self.submitNameMovie.setObjectName("submitNameMovie")
        self.submitNameMovie.clicked.connect(self.clickSubmitNameMovie)

        self.timer = QTimer()
        self.timer.timeout.connect(self.showTime)
        self.timer.start(1000)


        self.retranslateUi(WizardPage)
        self.comboBoxForLanguage.setCurrentIndex(0)
        self.comboBoxForFormat.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(WizardPage)

    def retranslateUi(self, WizardPage):
        _translate = QtCore.QCoreApplication.translate
        WizardPage.setWindowTitle(_translate("WizardPage", "PySubDl"))
        self.StartButton.setText(_translate("WizardPage", "Start"))
        self.CancelButton.setText(_translate("WizardPage", "Cancel"))
        self.GetNameMovie.setPlaceholderText(_translate("WizardPage", "For Example Deadpool "))
        self.NameMovie.setText(_translate("WizardPage", "Please Enter Name of movie :"))
        self.labelOfLanguage.setText(_translate("WizardPage", "Select Language Of Subtitle :"))
        self.labelOfFormatMovie.setText(_translate("WizardPage", "Select Format Movie :"))
        self.labelOFResolotion.setText(_translate("WizardPage", "Choose Resolotion :"))
        self.label.setText(_translate("WizardPage", "Poster Movie :"))
        self.comboBoxForLanguage.setCurrentText(_translate("WizardPage", "Persian"))
        self.comboBoxForLanguage.setItemText(0, _translate("WizardPage", "Persian"))
        self.comboBoxForLanguage.setItemText(1, _translate("WizardPage", "English"))
        self.comboBoxForLanguage.setItemText(2, _translate("WizardPage", "Arabic"))
        self.comboBoxForFormat.setCurrentText(_translate("WizardPage", "WEB-DL"))
        self.comboBoxForFormat.setItemText(0, _translate("WizardPage", "WEB-DL"))
        self.comboBoxForFormat.setItemText(1, _translate("WizardPage", "WEBRip"))
        self.comboBoxForFormat.setItemText(2, _translate("WizardPage", "HDTV"))
        self.comboBoxForFormat.setItemText(3, _translate("WizardPage", "HDRip"))
        self.comboBoxForFormat.setItemText(4, _translate("WizardPage", "HC-Cam"))
        self.comboBoxForFormat.setItemText(5, _translate("WizardPage", "HDTC"))
        self.comboBoxForFormat.setItemText(6, _translate("WizardPage", "HC.CAMRip"))
        self.comboBoxForFormat.setItemText(7, _translate("WizardPage", "HC.HDTS"))
        self.comboBoxForFormat.setItemText(8, _translate("WizardPage", "HD-TC"))
        self.comboBoxForFormat.setItemText(9, _translate("WizardPage", "BluRay"))
        self.comboBoxForFormat.setItemText(10, _translate("WizardPage", "UHD.BluRay"))
        self.comboBoxForFormat.setItemText(11, _translate("WizardPage", "BRRip"))
        self.comboBoxForFormat.setItemText(12, _translate("WizardPage", "BDRip"))
        self.comboBoxForFormat.setItemText(13, _translate("WizardPage", "Full.HD"))
        self.comboBoxForFormat.setItemText(14, _translate("WizardPage", "HDCam"))
        self.radioButton480.setText(_translate("WizardPage", "480"))
        self.radioButton720.setText(_translate("WizardPage", "720"))
        self.radioButton1080.setText(_translate("WizardPage", "1080"))
        self.radioButton2160.setText(_translate("WizardPage", "2160"))
        self.labelOfOsName.setText(_translate("WizardPage", "OS System :"))
        self.labelOsNameShow.setText(_translate("WizardPage", self.showOs()))
        self.labelForPath.setText(_translate("WizardPage", "Path for Download :"))
        self.ChangePathbutton.setText(_translate("WizardPage", "Change"))
        self.submitNameMovie.setText(_translate("WizardPage", "Submit"))

    # This def check which one radio button has active
    def setResolotion(self):
        resolotionSelected = ""
        if self.radioButton480.isChecked():
            resolotionSelected = self.radioButton480.text()
        elif self.radioButton720.isChecked():
            resolotionSelected = self.radioButton720.text()
        elif self.radioButton1080.isChecked():
            resolotionSelected = self.radioButton1080.text()
        elif self.radioButton2160.isChecked():
            resolotionSelected = self.radioButton2160.text()
        return resolotionSelected

    # Set format
    def setFormat(self):
        formatSelected = self.comboBoxForFormat.currentText()
        return formatSelected
    # Set language
    def setLanguage(self):
        languageSelected = self.comboBoxForLanguage.currentText()
        return languageSelected

    # Set name movie
    def setNameMovie(self):
        movie = self.GetNameMovie.toPlainText()
        return movie

    # Show os system for example Linux
    def showOs(self):
        osName = platform.system()
        return osName

    # This def define till show dialog and select folder for save subtitle
    def useDialog(self):
        nameMovie = self.GetNameMovie.toPlainText()
        if nameMovie == "":
            self.noneNameMovie()
        else:
            self.currentpath = QFileDialog.getExistingDirectory()
            self.pathwin = self.currentpath.replace("/", "\\")
            if self.currentpath:
                self.textEdit.setText(self.pathwin)

    # This def show time and date in program
    def showTime(self):
        time = QDateTime.currentDateTime()
        timeDisplay = time.toString('yyyy-MM-dd hh:mm:ss dddd')
        self.labelShowTime.setText(timeDisplay)

    # This def check textbox till get name movie
    def clickSubmitNameMovie(self):
        nameMovie = self.GetNameMovie.toPlainText()
        if nameMovie == "":
            self.noneNameMovie()
        else:
            self.checkSubmitButton = True
            self.progressBar(100)

    # if textbox has empty see this Messagebox for error
    def noneNameMovie(self):
        msg = QMessageBox()
        msg.setWindowTitle("PySubDl")
        msg.setText("The name of Movie is empty please enter the name.")
        msg.setIcon(QMessageBox.Warning)
        msg.setStandardButtons(QMessageBox.Ok)
        e = msg.exec_()

    # show progressbar
    def progressBar(self, maxProgressBar):
        for i in range(maxProgressBar):
            time.sleep(0.02)
            self.progressBarOfPoster.setValue(i + 1)
            if i == maxProgressBar-5:
                self.showPoster()

    # Get poster form the site and show on program
    def showPoster(self):
        try:
            posterUrl, self.searchUrl = self.processFindPoster()
            image = QImage()
            image.loadFromData(requests.get(posterUrl).content)

            self.labelShowPoster.setPixmap(QPixmap(image))
            self.labelShowPoster.show()
        except:
            msg = QMessageBox()
            msg.setWindowTitle("PySubDl")
            msg.setText("Cant find poster.Please check name movie.")
            msg.setIcon(QMessageBox.Warning)
            msg.setStandardButtons(QMessageBox.Ok)
            e = msg.exec_()

    # For close window
    def closeWindow(self):
        exit(0)

    # Create folder if dont exist
    def createFolder(self):
        if self.showOs() == "Windows":
            self.path = os.path.join(self.pathwin, self.setNameMovie().capitalize())
        else:
            self.path = os.path.join(self.currentpath, self.setNameMovie().capitalize())
        try:
            if os.path.exists(self.setNameMovie().capitalize()):
                msg = QMessageBox()
                msg.setWindowTitle("PySubDl")
                msg.setText("Folder with name movie has exist.please remove it or change directory.")
                msg.setIcon(QMessageBox.Information)
                msg.setStandardButtons(QMessageBox.Ok)
            else:
                os.makedirs(self.path, exist_ok=True)

        except OSError as error:
            print("Directory '%s' can not be created" % self.setNameMovie().capitalize())

    # This def get url poster and movie
    def processFindPoster(self):
        try:
            getNameMovie = self.setNameMovie()
            getlanguage = self.setLanguage()
            getNameMovie = getNameMovie.replace(" ", "+")
            getNameMovie = getNameMovie.lower()

            searchUrl = webSiteUrl + "/subtitles/searchbytitle?query=" + getNameMovie + "&l="

            getPage = requests.get(searchUrl)
            getInfoPage = BeautifulSoup(getPage.content, "html5lib")

            searchName = getInfoPage.find("div", {"class": "title"})
            nameMovieFound = searchName.get_text()

            nameMovieFound = nameMovieFound.lower()
            nameCheckMovie = getNameMovie.split()

            for check in nameCheckMovie:
                if check not in nameMovieFound:
                    msg = QMessageBox()
                    msg.setWindowTitle("PySubDl")
                    msg.setText("Movie not found")
                    msg.setIcon(QMessageBox.Information)
                    msg.setStandardButtons(QMessageBox.Ok)
                    continue

            searchMovieUrl = webSiteUrl + searchName.find("a").get("href") + "/" + language[getlanguage]

            getPage = requests.get(searchMovieUrl)
            getInfoPage = BeautifulSoup(getPage.content, "html5lib")

            posterUrl = getInfoPage.find("div", {"class": "poster"}).find("img").get("src")

            return posterUrl, searchMovieUrl
        except:
            self.errormsg()

    # This def get link subtitle for download
    def processFindsub(self,searchMovieUrl):
        try:
            getFormat = self.setFormat()
            getResolotion = self.setResolotion()
            getPage = requests.get(searchMovieUrl)
            getInfoPage = BeautifulSoup(getPage.content, "html5lib")
            subtitleUrl = []
            for item in getInfoPage.find_all("li", {"class": "item"}):
                for list in item.find_all("ul", {"class": "scrolllist"}):
                    if getFormat in list.text and getResolotion in list.text:
                        subtitleUrl.append(
                            webSiteUrl + item.find("a", {"class": "download icon-download"}).get("href"))

            linkDownload = []
            for page in subtitleUrl:
                getPage = requests.get(page)
                getInfoPage = BeautifulSoup(getPage.content, "html5lib")
                linkDownload.append(webSiteUrl + getInfoPage.find("a", {"class": "button positive"}).get("href"))

            return linkDownload
        except:
            self.errormsg()

    # Download sub and save and unzip
    def getSub(self, os, linkDownload):
        if os == "Windows":
            count = 1
            for link in linkDownload:
                filename = self.setNameMovie() + str(count) + ".zip"
                count += 1
                req = requests.get(link)
                with open(filename, "wb") as f:
                    for chunk in req.iter_content(chunk_size=8192):
                        if chunk:
                            f.write(chunk)

            filesToMove = []
            for i in range(len(linkDownload)):
                filesToMove.append(self.setNameMovie() + str(i + 1) + ".zip")

            for file in filesToMove:
                with ZipFile(self.pathProgram + "\\" + file, 'r') as zip:
                    zip.extractall(self.path)

            return filesToMove
        if os == "Linux":
            count = 1
            for link in linkDownload:
                system("wget -O "+str(count)+".zip '"+link+"'")
                system("unzip "+str(count)+".zip && rm "+str(count)+".zip")
                system("mv *.srt '" + self.path + "'")
                count += 1

    # remove zip just for windows os
    def removeZip(self, filesToMove):
        try:
            for file in filesToMove:
                os.remove(self.pathProgram + "\\" + file)
        except Exception as e:
            print("error"+ e)

    # error message for dont click submit button and etc
    def errormsg(self):
        msg = QMessageBox()
        msg.setWindowTitle("PySubDl")
        msg.setText("Cant find movie.Please check name movie and enter the name on textbox and then press submit button.")
        msg.setIcon(QMessageBox.Warning)
        msg.setStandardButtons(QMessageBox.Ok)
        e = msg.exec_()

    # This def start the process then show relative message
    def clickStartbtn(self):
        if not self.checkSubmitButton:
            self.errormsg()

        else:
            self.createFolder()
            link = self.processFindsub(self.searchUrl)
            fileRm = self.getSub(self.showOs(), link)
            msg = QMessageBox()
            msg.setWindowTitle("PySubDl")
            msg.setText("Process finished")
            msg.setIcon(QMessageBox.Information)
            msg.setStandardButtons(QMessageBox.Ok)

            e = msg.exec_()
            if self.showOs() == "Windows":
                self.removeZip(fileRm)

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    WizardPage = QtWidgets.QWizardPage()
    ui = Ui_WizardPage()
    ui.setupUi(WizardPage)
    WizardPage.show()
    sys.exit(app.exec_())
